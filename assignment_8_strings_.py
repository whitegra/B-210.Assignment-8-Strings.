# -*- coding: utf-8 -*-
"""Assignment #8: Strings.

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z-oEswRpemqC6Exv5X16mVTh7u5iZN53

def() for encryption
"""

def analyze_encryption():
    """
    This function takes an encrypted user_string as input and calculates the number of numeric characters,

    The output displays these counts to the user in an aesthetically pleasing manner.

    The variables used are: num_count, lowercase_count, uppercase_count, and char_count.
    """
    # user enter string:
    user_string = input("Enter the message you would like to analyze: ")

    # initialize all counts to zero for the types of characters before the loop:
    # innitialize numbers count to 0:
    num_count = 0
    # initialize lowercase char count to 0:
    lowercase_count = 0
    # initialize uppercase char count to 0:
    uppercase_count = 0
    # initialize other symbol count to 0:
    char_count = 0

    # for every character in the user_string:
    for char in user_string:
      # if the characterin the string is a space, then skip it.
        if char.isspace():
            continue
        # if character is numeric then add 1:
        elif char.isnumeric():
            num_count += 1
        # else if the chracter is lowercaase, then add 1:
        elif char.islower():
            lowercase_count += 1
        # else if character is uppercase, then add 1:
        elif char.isupper():
            uppercase_count += 1
        # if the character is none of those, then it is a symbol (char), so add 1:
        else:
            char_count += 1

    # to print results in an 'aesthetically pleasing' way, use the string format to print the numbers of values:
    print("_______________________________________________")
    print(f"number of numeric characters: {num_count}")
    print(f"number of lowercase characters: {lowercase_count}")
    print(f"number of uppercase characters: {uppercase_count}")
    print(f"number of symbols: {char_count}")
    print("_______________________________________________")

"""def() for secret message

"""

def decode_acrostic():
    """
    Prompts the user to enter an acrostic message, then decodes a secret message
    by extracting specific letters from each line of the given text, where lines
    are separated by '\n' or '\t'.

    Returns:
    The decoded secret message as a string.
    """
    # Prompt the user for the message
    message = input("Enter the acrostic message you would like to decode: ")

    # replace all '\t' with '\n' then split the message by '\n' to create the lines to decode from
    lines = message.replace('\t', '\n').split('\n')

    # innitialize a list to contain the decoded secret message
    secret_message = []

    # for each line in the line of the given message...
    for line in lines:
        # ensure the line has at least one character to avoid index errors
        if len(line) > 0:
            secret_message.append(line[0])  # apppend the first character of each line into the secret message list

    # return: join all the first letters from the rows in the user's message to print the message decoded
    return ''.join(secret_message)

# call the function and print the decoded message
decoded_message = decode_acrostic()
print(decoded_message)

"""MAIN"""

while True:
  # for user to chose the program
  program_choice = input("Enter the program you would like to run: ('e' for analyze encryption or 'a' for acrostic message decoder: )")

  # in case user enters an invalid program choice
  if program_choice != 'e' and program_choice != 'a':
    print("Invalid choice. Please try again. ")
    continue

  # FOR ANALYZING ENCYPTED MESSAGES:
  elif program_choice == 'e':
    while True:
      analyze_encryption()
      run_encrypt = input("Run again? ('y/n'):")
      if run_encrypt != 'y':
        break

  # FOR DECODING ACROSTIC MESSAGE:
  elif program_choice == 'a':
    while True:
      decode_acrostic()
      run_acrostic = input("Run again? ('y/n'): ")
      if run_acrostic != 'y':
        break

  # invlaid choice
  else:
    print("invalid choice. Please try again. /n")
    continue

# run program again (while loop)
  run_program_again = input("Would you like to run the program again? ('y' for yes, 'stop' to exit): ")
  if run_program_again != 'y':
    break